on:
  push:
    tags:
    - '*'
    branches:
    - '*'
  pull_request:
    branches:
    - '*'
  # repository_dispatch is a newer github-actions feature that will allow building from triggers other than code merge/PR
  repository_dispatch:
    types: [build]

name: Build EmuConfigurator
jobs:
  build:
    timeout-minutes: 40
    continue-on-error: false
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      max-parallel: 3
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: git checkout
        continue-on-error: false
        uses: actions/checkout@master
      - name: get tag & short-sha
        continue-on-error: true
        run: |
          echo "REVISION_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: setup node
        continue-on-error: false
        uses: actions/setup-node@v2
        with:
          node-version: '11'
      # for debugging
      - name: show variables
        continue-on-error: true
        run: |
          echo "Build: ${{ github.RUN_NUMBER }}"
          echo "Commit: ${{ github.SHA }}"
          echo "Short: ${{ env.SHORT_SHA }}"
          echo "Ref: ${{ github.REF}}"
          echo "Tag: ${{ env.REVISION_TAG }}"
          echo "Actor: ${{ github.ACTOR }}"
          echo "Repo: ${{ github.REPOSITORY }}"
      # build stuff
      - name: yarn install
        run: yarn install
      - name: yarn gulp clean-release
        run: yarn gulp clean-release
      - name: yarn gulp release --linux64
        continue-on-error: false
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt install -y rpm
          yarn gulp release --linux64
      - name: yarn gulp release --osx64
        continue-on-error: false
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          yarn gulp release --osx64
      - name: yarn gulp release  --win32 --win64
        continue-on-error: false
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: yarn gulp release  --win32 --win64
      - name: Upload Artifacts
        uses: actions/upload-artifact@master
        with:
          name: EmuConfigurator-${{ github.ACTOR }}-${{ github.RUN_NUMBER }}
          path: release/*
  draft:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    timeout-minutes: 10
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      # for debugging
      - name: show variables
        continue-on-error: true
        run: |
          echo "Build: ${{ github.RUN_NUMBER }}"
          echo "Commit: ${{ github.SHA }}"
          echo "Ref: ${{ github.REF}}"
          echo "Actor: ${{ github.ACTOR }}"
          echo "Repo: ${{ github.REPOSITORY }}"
      - name: download artifacts
        continue-on-error: false
        uses: actions/download-artifact@master
        with:
          name: EmuConfigurator-${{ github.ACTOR }}-${{ github.RUN_NUMBER }}
      - name: list artifacts
        continue-on-error: true
        run: |
          ls -lh ./*.???
      - name: draft release
        continue-on-error: true
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./emuflight-configurator*.???
          draft: true
          prerelease: true
          tag_name: ${{ github.RUN_NUMBER }}   # use the build Number, but we manually change to version so that it creates a version-tag on release
          name:  DRAFT / EmuConfigurator / GitHub Build ${{ github.RUN_NUMBER }}
          body: |
            ### Build: ${{ github.RUN_NUMBER }}
            ### Commit: ${{ github.SHA }}
            ### Ref: ${{ github.REF}}
            ### Actor: ${{ github.ACTOR }}
            ### Repo: ${{ github.REPOSITORY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # jfrog util easier on linux, so VM to download artifacts and upload bintray
  bintray:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    timeout-minutes: 10
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      # build job failing to pass environment variables, so recreate them from checkout :(
      - name: git checkout
        continue-on-error: false
        uses: actions/checkout@master
      - name: get tag
        continue-on-error: true
        run: |
          echo "REVISION_TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      # for debugging
      - name: show variables
        continue-on-error: true
        run: |
          echo "Build: ${{ github.RUN_NUMBER }}"
          echo "Commit: ${{ github.SHA }}"
          echo "Short: ${{ env.SHORT_SHA }}"
          echo "Ref: ${{ github.REF}}"
          echo "Tag: ${{ env.REVISION_TAG }}"
          echo "Actor: ${{ github.ACTOR }}"
          echo "Repo: ${{ github.REPOSITORY }}"
      - name: download artifacts
        continue-on-error: false
        uses: actions/download-artifact@master
        with:
          name: EmuConfigurator-${{ github.ACTOR }}-${{ github.RUN_NUMBER }}
      - name: list artifacts
        continue-on-error: true
        run: |
          ls -lh ./emuflight-configurator*.???
      - name: rename with build_num and sha
        continue-on-error: false   #bad rename breaks upload to bintray
        run: |
          sudo apt -y install rename
          export buildname="_Build_${{ github.RUN_NUMBER }}_${{ env.SHORT_SHA }}"
          rename "s/\.(?=[^.]*$)/${buildname}\./" emuflight-configurator*.???
          ls -lh ./emuflight-configurator*.???
      - name: upload to bintray
        continue-on-error: true
        run: |
          curl -fL https://getcli.jfrog.io | sh
          export JFROG_CLI_OFFER_CONFIG=false
          export CI=true
          export JFROG_CLI_LOG_LEVEL=DEBUG
          ./jfrog bt config --user=${{secrets.BINTRAYUSERNAME}} --key=${{secrets.BINTRAYAPIKEY}} --licenses=GPL-3.0
          export revtag="${{ env.REVISION_TAG }}"
          export shortsha="${{ env.SHORT_SHA }}"
          export repo="emuflight-dev/dev_cfg"
          export package="${{ env.REVISION_TAG }}"
          export version="${{ github.RUN_NUMBER }}"
          export datestring="$(date +"%Y-%m-%d")"
          ./jfrog bt package-create --pub-dn=true --vcs-url="https://github.com/emuflight" "${repo}/${package}" || true
          ./jfrog bt version-create "${repo}/${package}/${version}"  || true
          ./jfrog bt upload --publish=true "./emuflight-configurator*" "${repo}/${package}/${version}" "${datestring}_EmuConfigurator_GitHub_Build_${version}_${revtag}/" || true
